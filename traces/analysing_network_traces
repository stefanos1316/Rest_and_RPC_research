NETWORK TRACES

gRPC
====
Java spends almost 30% of its time on sendmmsg which is not the case for Go.
Also, Java spends 7% of its time on setsockopt command which not exist for Go.
Python sends 62.56% of its execution time on sendmsg and 37.31% on recvmsg, 
this is done only for Python while Go and JavaScript are mainly using socket and the connect syscalls (calling 1 time only)

RPC
===
Python is spending its major time on recvfrom and sendto network calls that are not happening for Go, Java, and JS.

REST
====
Java is spending most of its time on 55.47% recvfrom and 40.88% sendto network calls
Python is spending 37.53% of its time on recvfrom and 13.26% of its time on sendto network calls
JavaScript and Go which are the fastest and more energy efficient implementations are mainly using only connect and socket network calls.


ABOUT SEND, SENDTO, AND SENDMSG COMMANDS
send(), sendto(), and sendmsg() are used to transmit message to other sockets
send() is a simple wrapper around sendto() system call.
sento() Send a datagram to a given address. We move the address into kernel space and check the user space data area is readable before invoking the protocol (this can have some overhead?)
also sendto() and send() command are using buffers in contrast to sendmsg() which is using streams to do that.
send() may be used only when the socket is in a connected state, while sendto() and sendmsg() may be used at any time.


ABOUS RECV, RECVFROM, AND RECVMSG COMMANDS
recv(), recvfrom(), and recvmsg() are syscalls used to recieve messages from both connection-oriented and connectionless sockets.
recvfrom adds the data received from the socket to a buf by first calculating the necessary lenght to allocate the appropriate buffer size.


fcntl is used when a socket is nonblocking

